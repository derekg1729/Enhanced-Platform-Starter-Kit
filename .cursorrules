{
  "version": "2.12",
  "meta": {
    "description": "Core rules for the agent-platform project",
    "stateFile": "docs/systematic-dev/workflow-state.md",
    "priority": [
      "Always check workflow-state.md first to determine current context",
      "Follow the Test-Driven Development workflow strictly",
      "Always write tests before functional code changes",
      "Run all tests frequently during development: pnpm run test",
      "Think critically and suggest improvements that I haven't thought of"
    ],
    "Communication":[
      "Brief and clear communication, prioritizing concise bullet points",
      "‚úÖ Use emojis to clearly categorize points",
      "‚úÖ Provide brief status updates in between actions",
      "‚ùå Avoid unnecessary details",
      "üëã Identify actions the user must take to validate agent changes"
    ]
  },
  "WORKFLOW_KEY": {
    "TDD": {
      "description": "Test-Driven Development is the foundation of our development process",
      "overview": "This workflow ensures that tests are written before implementation, code changes are minimal and focused, and all tests pass before completion.",
      "stages": {
        "DESIGN": {
          "description": "Design the feature and plan implementation",
          "actions": "Define feature requirements, plan implementation, identify files to modify",
          "artifacts": "Update feature-design.md with detailed design",
          "exitCriteria": "Complete design document with all files identified",
          "nextStage": "PRE_TESTING",
          "updateInstructions": "Update workflow-state.md to STAGE_KEY: PRE_TESTING when design is complete",
          "instructions": [
            "Create design in docs/features/[feature-key]/feature-design.md",
            "Identify ALL files that will need to be modified",
            "Identify list of files to be edited and created.",
            "List designed file changes in docs/features/[feature-name]/feature-design.md",
            "Document dependencies between files",
            "Identify ALL test files to be updated or created",
            "Identify components at high risk of regression, and add tests for them"
          ]
        },
        "PRE_TESTING": {
          "description": "Write failing tests for all functionality",
          "actions": "Create or update test files for all components/functions",
          "artifacts": "New/updated test files",
          "exitCriteria": "All tests written and confirmed to fail for expected reasons",
          "nextStage": "IMPLEMENTATION",
          "updateInstructions": "Update workflow-state.md to STAGE_KEY: IMPLEMENTATION when tests are verified",
          "instructions": [
            "Create/update test files for all modified components",
            "Write tests that cover expected behaviors and edge cases",
            "Update existing tests affected by the changes",
            "Run tests with: pnpm run test:[relevant-area]",
            "Verify tests fail for the expected reasons"
          ]
        },
        "IMPLEMENTATION": {
          "description": "Implement the feature code to make tests pass",
          "actions": "Write minimal code to make tests pass",
          "artifacts": "New/updated implementation files",
          "exitCriteria": "Minimal implementation that makes tests pass",
          "nextStage": "VALIDATION",
          "updateInstructions": "Update workflow-state.md to STAGE_KEY: VALIDATION when implementation is complete",
          "instructions": [
            "Implement the feature according to the design",
            "Only modify files identified in the design phase: docs/features/[feature-key]/feature-design.md",
            "Write minimal code to make tests pass",
            "Run targeted tests frequently: pnpm run test:[relevant-area]",
            "Return to design phase if additional files need modification",
            "Update docs/features/[feature-key]/implementation-progress.md with status"
          ]
        },
        "VALIDATION": {
          "description": "Run all tests, verify feature works as expected",
          "actions": "Run full test suite, fix any issues",
          "artifacts": "Test results, any bug fixes",
          "exitCriteria": "All tests passing, feature meets acceptance criteria",
          "nextStage": "COMPLETION",
          "updateInstructions": "Update workflow-state.md to STAGE_KEY: COMPLETION when all tests pass",
          "instructions": [
            "Run the complete test suite: pnpm run test",
            "Fix implementation if any tests fail",
            "Address unexpected test failures immediately",
            "Run build process: pnpm run build",
            "Update docs/features/[feature-key]/implementation-progress.md with validation status"
          ]
        },
        "COMPLETION": {
          "description": "Update documentation, commit changes",
          "actions": "Update documentation, commit code",
          "artifacts": "Updated backlog.md, commit",
          "exitCriteria": "Changes committed, task marked complete",
          "nextStage": "DESIGN (new feature)",
          "updateInstructions": "After committing, update workflow-state.md to STAGE_KEY: DESIGN and FEATURE_KEY: NONE",
          "instructions": [
            "Update task status in docs/systematic-dev/backlog.md",
            "Update bug status in docs/systematic-dev/bug-tracker.md if applicable",
            "Commit with conventional format: type(scope): message",
            "Manually verify the feature works as expected",
            "Finalize docs/features/[feature-key]/README.md with usage instructions"
          ]
        }
      },
      "testing": {
        "commands": {
          "all": "pnpm run test",
          "unit": "pnpm run test:unit",
          "integration": "pnpm run test:integration",
          "components": "pnpm run test:components",
          "db": "pnpm run test:db",
          "api": "pnpm run test:api"
        },
        "bestPractices": [
          "Run targeted tests during implementation (e.g., test:db for database changes)",
          "Run full test suite before completing a feature",
          "Create tests that validate both success and error paths", 
          "Identify and run relevant test suites based on the locality of changes"
        ]
      },
      "documentation": {
        "structure": {
          "projectRoot": {
            "README.md": "Project overview and setup instructions (public)",
            "docs/": "Project documentation directory"
          },
          "docs/systematic-dev/": {
            "workflow-state.md": "Current workflow state (minimal)",
            "backlog.md": "Task tracking and status",
            "bug-tracker.md": "Bug tracking"
          },
          "docs/features/": {
            "[feature-key]/": "Feature-specific documentation directory",
            "[feature-key]/feature-design.md": "Detailed feature design",
            "[feature-key]/implementation-progress.md": "Implementation status and notes",
            "[feature-key]/README.md": "Feature usage and limitations"
          }
        },
        "primaryDocs": [
          "README.md - Public project overview and setup",
          "docs/systematic-dev/workflow-state.md - Current workflow state",
          "docs/systematic-dev/backlog.md - Task tracking",
          "docs/systematic-dev/bug-tracker.md - Bug tracking"
        ],
        "featureDocs": [
          "docs/features/[feature-key]/feature-design.md - Design specifications",
          "docs/features/[feature-key]/implementation-progress.md - Implementation progress",
          "docs/features/[feature-key]/README.md - Usage instructions and limitations"
        ]
      }
    },
    "CHIP": {
      "description": "Computer Heuristics Improvement Protocol for updating rules",
      "acronym": "CHIP",
      "stages": {
        "PAUSE": {
          "description": "Pause current work, save state",
          "actions": "Save current state with git stash",
          "exitCriteria": "Work state saved, ready for analysis",
          "nextStage": "ANALYSIS",
          "updateInstructions": "Update workflow-state.md to WORKFLOW_KEY: CHIP and STAGE_KEY: PAUSE",
          "instructions": [
            "‚è∏Ô∏è When the CHIP acronym is triggered, immediately pause current work",
            "üíæ Save work state with: git stash --include-untracked",
            "‚úÖ Acknowledge the trigger and prepare for analysis"
          ]
        },
        "ANALYSIS": {
          "description": "Analyze issue, identify rule improvements",
          "actions": "Review development history, identify gaps in rules",
          "exitCriteria": "Clear understanding of needed changes",
          "nextStage": "IMPLEMENTATION",
          "updateInstructions": "Update workflow-state.md to STAGE_KEY: ANALYSIS",
          "instructions": [
            "üîç Identify actions or scenarios that prompted feedback",
            "üìä Analyze effectiveness of current rules",
            "‚ö†Ô∏è Identify gaps in current rules",
            "üìù Document findings concisely"
          ]
        },
        "IMPLEMENTATION": {
          "description": "Update rules, test effectiveness",
          "actions": "Modify rules, ensure consistency",
          "exitCriteria": "Rules updated and verified",
          "nextStage": "RESUME",
          "updateInstructions": "Update workflow-state.md to STAGE_KEY: IMPLEMENTATION",
          "instructions": [
            "‚úÖ Design new/improved rules based on analysis",
            "‚úÖ Keep rules clear, specific, and actionable",
            "‚ö†Ô∏è Consider potential unintended consequences",
            "üìù Document rationale for changes",
            "Increment version number in .cursorrules",
            "Ensure consistency with existing rules"
          ]
        },
        "RESUME": {
          "description": "Return to previous workflow",
          "actions": "Restore saved state, continue development",
          "exitCriteria": "Previous work resumed with new rules applied",
          "nextStage": "(return to previous workflow)",
          "updateInstructions": "Update workflow-state.md to STAGE_KEY: RESUME, then to the appropriate TDD workflow stage",
          "instructions": [
            "Return to paused development process",
            "Apply new rules to current task",
            "Restore saved state: git stash pop",
            "Continue development from pause point"
          ]
        }
      },
      "autoTriggers": {
        "name": "Automatic CHIP Triggers",
        "description": "Conditions that automatically trigger the CHIP process",
        "errorPatterns": [
          {
            "pattern": "Event handlers cannot be passed to Client Component props",
            "category": "Server/Client Boundary",
            "severity": "High",
            "action": "Immediate CHIP Review"
          },
          {
            "pattern": "Test timed out in",
            "category": "Test Infrastructure",
            "severity": "High",
            "action": "Immediate CHIP Review"
          },
          {
            "pattern": "Failing tests in the full test suite",
            "category": "Test Coverage",
            "severity": "High",
            "action": "Immediate CHIP Review"
          }
        ]
      }
    }
  },
  "FEATURE_KEY": {
    "NONE": {
      "description": "No specific feature is being developed"
    },
    "TEMPLATES": {
      "description": "System for managing documentation templates",
      "files": [
        "docs/templates/backlog.md",
        "docs/templates/bug-tracker.md",
        "docs/templates/feature-design.md",
        "docs/templates/README.md"
      ]
    }
  },
  "aiAgentGuidelines": {
    "description": "Specific guidelines for AI agents working with this codebase",
    "criticalRules": [
      {
        "rule": "Always use commit verification",
        "explanation": "Pre-commit hooks enforce critical quality standards.",
        "correctAction": "When pre-commit hooks fail, analyze the error and fix the underlying issue."
      },
      {
        "rule": "All changes must pass all checks",
        "explanation": "Even documentation changes must pass all checks to ensure consistency.",
        "correctAction": "Fix any failing checks before committing."
      },
      {
        "rule": "Keep workflow-state.md updated",
        "explanation": "Workflow state file must accurately reflect the current development state.",
        "correctAction": "Update workflow-state.md when transitioning between workflow stages."
      }
    ],
    "workflowStateManagement": {
      "description": "Guidelines for managing workflow state",
      "rules": [
        "Check workflow-state.md at the beginning of each interaction",
        "Update workflow-state.md when transitioning between stages",
        "Include current stage actions in your responses"
      ]
    }
  },
  "instructions": {
    "default": "Always check docs/systematic-dev/workflow-state.md first to determine current context. Follow the Test-Driven Development workflow for all code changes. Write tests before implementation, and verify they fail before writing code to make them pass.",
    "onStart": "Check docs/systematic-dev/workflow-state.md to identify the current feature and workflow stage. Test-Driven Development is required for all code changes."
  },
  "project": {
    "name": "agent-platform",
    "type": "fullstack",
    "description": "Multi-tenant platform with Next.js, Vercel, and PostgreSQL",
    "documentation": {
      "primaryFiles": [
        "README.md - Public project overview and setup",
        "docs/systematic-dev/workflow-state.md - Current workflow state",
        "docs/systematic-dev/backlog.md - Task tracking",
        "docs/systematic-dev/bug-tracker.md - Bug tracking"
      ],
      "featureFiles": [
        "docs/features/[feature-key]/feature-design.md - Design specifications",
        "docs/features/[feature-key]/implementation-progress.md - Implementation progress",
        "docs/features/[feature-key]/README.md - Usage instructions and limitations"
      ]
    }
  },
  "structure": {
    "frontend": {
      "root": "app",
      "framework": "next.js",
      "styling": "tailwindcss",
      "routing": "app-router",
      "state": "react-hooks",
      "auth": {
        "provider": "next-auth",
        "components": ["app/app/(auth)", "middleware.ts"]
      }
    },
    "middleware": {
      "platform": "vercel",
      "services": [
        "edge-functions",
        "hosting",
        "postgres",
        "preview-deployments"
      ],
      "security": {
        "database": "row-level-security",
        "auth": "next-auth"
      },
      "routing": {
        "file": "middleware.ts",
        "patterns": [
          "app-subdomain",
          "preview-deployment",
          "multi-tenant"
        ]
      }
    },
    "backend": {
      "language": "typescript",
      "runtime": "node.js",
      "database": {
        "type": "postgres",
        "orm": "drizzle",
        "migrations": "drizzle/migrations"
      },
      "api": {
        "type": "next.js-api-routes",
        "pattern": "app/api"
      }
    }
  },
  "development": {
    "versionControl": {
      "branchPrefixes": {
        "feature": "feature/",
        "fix": "fix/",
        "refactor": "refactor/",
        "test": "test/"
      },
      "commitStyle": "conventional",
      "mainProtection": true
    },
    "testing": {
      "framework": "vitest",
      "coverageThreshold": 80,
      "setupFile": "tests/__helpers__/setup.ts",
      "directories": {
        "unit": "tests/unit/",
        "integration": "tests/integration/",
        "db": "tests/integration/db/",
        "api": "tests/integration/api/",
        "components": "tests/integration/components/"
      },
      "commands": {
        "all": "pnpm run test",
        "unit": "pnpm run test:unit",
        "integration": "pnpm run test:integration",
        "components": "pnpm run test:components",
        "db": "pnpm run test:db",
        "api": "pnpm run test:api",
        "single": "pnpm run test [test-file-path]"
      },
      "process": {
        "tdd": true,
        "writeTestsFirst": true,
        "validateBeforeCommit": true
      }
    },
    "codeQuality": {
      "typescript": {
        "strict": true
      },
      "linting": "eslint",
      "formatting": "prettier"
    }
  },
  "dependencies": {
    "node": "18.x",
    "packageManager": "pnpm",
    "nextjs": "14.x",
    "commonCliTools": {
      "git": {
        "description": "Version control system",
        "warning": "NEVER commit via command line! Always use the GitHub UI or a Git client. Never commit sensitive information or environment files (.env*)!"
      },
      "vercel": {
        "description": "Deployment platform CLI",
        "projectCommands": [
          "vercel env pull - Pull environment variables to local .env files",
          "vercel deploy - Deploy the project to a preview environment"
        ]
      },
      "pnpm": {
        "description": "Fast, disk space efficient package manager"
      },
      "drizzle": {
        "description": "Database ORM and migration tool",
        "projectCommands": [
          "pnpm drizzle-kit generate - Generate migrations from schema changes",
          "pnpm drizzle-kit push - Apply migrations to database"
        ]
      }
    }
  },
  "security": {
    "envFiles": {
      "allowCommit": false,
      "examples": [
        ".env.example",
        ".env.local.example",
        ".env.preview.example",
        ".env.production.example"
      ]
    },
    "apiKeys": {
      "storage": "environment-variables"
    },
    "auth": {
      "required": true,
      "provider": "github-oauth",
      "databaseSecurity": "row-level",
      "middleware": "path-based"
    }
  },
  "cicd": {
    "checks": {
      "tests": true,
      "coverage": true,
      "lint": true,
      "types": true,
      "build": true
    },
    "deployment": {
      "platform": "vercel",
      "environments": [
        "development",
        "preview",
        "production"
      ],
      "domains": {
        "production": "wackywavelength.fyi",
        "preview": "dereks-projects-32c37a6a.vercel.app"
      },
      "autoDeploy": {
        "branch": "main",
        "enabled": true
      },
      "requiredChecksBeforeDeployment": [
        {
          "name": "linting",
          "description": "Ensure code meets style and quality standards",
          "command": "npm run lint",
          "required": true
        },
        {
          "name": "testing",
          "description": "Verify all tests pass",
          "command": "npm run test",
          "required": true
        },
        {
          "name": "buildCheck",
          "description": "Ensure application builds successfully",
          "command": "npm run build",
          "required": true
        },
        {
          "name": "typeCheck",
          "description": "Verify TypeScript types are correct",
          "command": "npm run typecheck",
          "required": true
        }
      ],
      "deploymentWorkflow": {
        "development": {
          "description": "Local development deployment",
          "steps": [
            "Run tests: npm run test",
            "Build locally: npm run build",
            "Test build locally: npm run start"
          ]
        },
        "preview": {
          "description": "Preview deployment for testing",
          "steps": [
            "Commit changes to feature branch",
            "Push to GitHub to trigger preview build",
            "Verify Vercel build succeeds",
            "Verify functionality in preview environment"
          ]
        },
        "production": {
          "description": "Production deployment",
          "steps": [
            "Commit changes to feature branch",
            "Push to GitHub and create pull request",
            "Verify all CI checks pass on the PR",
            "Merge PR to main branch",
            "Vercel automatically deploys main branch to production",
            "Verify functionality in production environment"
          ],
          "approvalRequired": true,
          "rollbackPlan": "Use Vercel dashboard to rollback to previous deployment if issues are detected"
        }
      }
    }
  },
  "bestPractices": {
    "preCommitWorkflow": {
      "description": "Required steps before committing changes",
      "steps": [
        {
          "name": "linting",
          "command": "pnpm run lint",
          "description": "Run linting to catch syntax and style issues"
        },
        {
          "name": "typeCheck",
          "command": "pnpm run typecheck",
          "description": "Verify TypeScript types are correct"
        },
        {
          "name": "testing",
          "command": "pnpm run test",
          "description": "Run all tests to ensure functionality works as expected"
        },
        {
          "name": "buildCheck",
          "command": "pnpm run build",
          "description": "Verify the application builds successfully"
        }
      ],
      "hookFailureHandling": {
        "description": "How to handle pre-commit hook failures",
        "steps": [
          "Read the error message to understand what check failed",
          "Fix the underlying issue",
          "Run the specific failing check to verify your fix",
          "Try committing again after fixing the issue"
        ]
      }
    },
    "middleware": {
      "principles": [
        "Keep middleware logic simple and focused",
        "Avoid special cases when possible",
        "Use environment-agnostic code",
        "Ensure testability with clear behavior-focused tests",
        "Optimize for performance by minimizing branching logic"
      ]
    },
    "multiTenant": {
      "dataIsolation": "row-level-security",
      "routing": "hostname-based",
      "customization": "per-tenant-configuration"
    },
    "analytics": {
      "googleAnalytics": {
        "description": "Guidelines for maintaining and extending Google Analytics implementation",
        "updateTriggers": [
          "Adding new pages or routes",
          "Implementing new user interactions (e.g., buttons, forms)",
          "Adding new features that represent business value",
          "Changing user flows or navigation patterns",
          "Implementing new conversion funnels",
          "Adding new tenant-specific features"
        ],
        "requiredActions": [
          "Update tests first (TDD approach) to verify new analytics requirements",
          "Add appropriate event tracking for new user interactions",
          "Document new events in the analytics documentation",
          "Verify events are firing correctly in development environment",
          "Add appropriate data attributes for tracking in the markup",
          "Ensure privacy compliance with new tracking"
        ],
        "eventNamingConventions": {
          "pattern": "[object]_[action]",
          "examples": [
            "button_click",
            "form_submit",
            "page_view",
            "feature_enable",
            "tenant_create"
          ]
        },
        "dataAttributes": {
          "description": "Use data attributes to track elements without modifying JS",
          "pattern": "data-ga-[type]=\"[value]\"",
          "examples": [
            "data-ga-category=\"navigation\"",
            "data-ga-action=\"click\"",
            "data-ga-label=\"signup\""
          ]
        },
        "tenantSpecificTracking": {
          "description": "Guidelines for tracking tenant-specific events",
          "implementation": "Include tenant ID as a custom dimension in all relevant events",
          "privacy": "Ensure tenant data is anonymized and complies with privacy regulations"
        },
        "testing": {
          "description": "Guidelines for testing analytics implementation",
          "approaches": [
            "Unit tests for event handlers",
            "Integration tests for event firing",
            "End-to-end tests for complete user flows",
            "Manual verification in Google Analytics Debug mode"
          ],
          "commands": {
            "basic": "npm run test:ga",
            "build": "npm run test:ga:build",
            "deployment": "npm run test:ga:deployment"
          },
          "when": [
            "After adding new analytics events",
            "Before deploying to production",
            "After updating the Google Analytics configuration",
            "When changing the application layout or structure"
          ]
        }
      }
    }
  },
  "agentPlatform": {
    "description": "Guidelines for building and extending the Agent Platform",
    "architecture": {
      "agentDefinition": {
        "components": [
          "Metadata (name, description, version)",
          "Configuration (parameters, settings)",
          "Tools (API connections, capabilities)",
          "Prompts (instructions, templates)",
          "Execution (runtime settings, memory)"
        ],
        "schema": "See lib/schema.ts for the agent schema definition"
      },
      "containerization": {
        "strategy": "Each agent runs in its own isolated container",
        "scaling": "Containers scale independently based on usage",
        "security": "Containers have limited access to resources and are isolated from each other"
      },
      "apiConnections": {
        "storage": "API keys are encrypted and stored securely",
        "access": "Keys are only decrypted at runtime in the agent container",
        "management": "Users can add, update, and revoke API connections"
      },
      "multiTenancy": {
        "isolation": "Agents are isolated by tenant",
        "sharing": "Agents can be shared with specific permissions",
        "marketplace": "Agents can be published to the marketplace for others to use"
      }
    },
    "bestPractices": {
      "agentDevelopment": {
        "principles": [
          "Focus on a single task or capability",
          "Use clear, concise prompts",
          "Implement proper error handling",
          "Include comprehensive testing",
          "Document usage and limitations"
        ],
        "testing": [
          "Test with various inputs",
          "Verify error handling",
          "Check performance under load",
          "Validate security measures",
          "Test integration with other systems"
        ],
        "security": [
          "Never expose API keys in client-side code",
          "Validate all inputs",
          "Limit agent permissions",
          "Monitor for unusual behavior",
          "Implement rate limiting"
        ]
      },
      "userExperience": {
        "principles": [
          "Make agent capabilities clear",
          "Provide helpful error messages",
          "Design intuitive configuration interfaces",
          "Include examples and templates",
          "Offer progressive disclosure of advanced features"
        ]
      }
    }
  },
  "freshAgentProtocol": {
    "description": "Protocol for initializing a fresh agent instance",
    "firstAction": "Always read workflow-state.md first, then read .cursorrules",
    "steps": [
      {
        "name": "Read Workflow State",
        "description": "Read and understand the current workflow state",
        "instructions": [
          "‚úÖ Read docs/systematic-dev/workflow-state.md completely",
          "‚úÖ Identify current WORKFLOW_KEY, STAGE_KEY, and FEATURE_KEY"
        ]
      },
      {
        "name": "Read Rules",
        "description": "Read and index the .cursorrules file",
        "instructions": [
          "‚úÖ Read the .cursorrules file completely",
          "‚úÖ Identify the immediately relevant files and directories"
        ]
      }
    ]
  }
} 