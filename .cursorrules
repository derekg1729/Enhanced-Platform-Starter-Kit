{
  "version": "1.0",
  "project": {
    "name": "agent-platform",
    "type": "fullstack",
    "description": "Multi-tenant platform with Next.js, Vercel, and PostgreSQL"
  },
  "structure": {
    "frontend": {
      "root": "app",
      "framework": "next.js",
      "styling": "tailwindcss",
      "routing": "app-router",
      "state": "react-hooks",
      "auth": {
        "provider": "next-auth",
        "components": ["app/app/(auth)", "middleware.ts"]
      }
    },
    "middleware": {
      "platform": "vercel",
      "services": [
        "edge-functions",
        "hosting",
        "postgres",
        "preview-deployments"
      ],
      "security": {
        "database": "row-level-security",
        "auth": "next-auth"
      },
      "routing": {
        "file": "middleware.ts",
        "patterns": [
          "app-subdomain",
          "preview-deployment",
          "multi-tenant"
        ]
      }
    },
    "backend": {
      "language": "typescript",
      "runtime": "node.js",
      "database": {
        "type": "postgres",
        "orm": "drizzle",
        "migrations": "drizzle/migrations"
      },
      "api": {
        "type": "next.js-api-routes",
        "pattern": "app/api"
      }
    }
  },
  "development": {
    "versionControl": {
      "branchPrefixes": {
        "feature": "feature/",
        "fix": "fix/",
        "refactor": "refactor/",
        "test": "test/"
      },
      "commitStyle": "conventional",
      "mainProtection": true
    },
    "testing": {
      "framework": "vitest",
      "coverageThreshold": 80,
      "setupFile": "tests/__helpers__/setup.ts",
      "directories": {
        "unit": "tests/unit/",
        "integration": "tests/integration/",
        "db": "tests/integration/db/",
        "api": "tests/integration/api/",
        "components": "tests/integration/components/",
        "e2e": "tests/e2e/",
        "performance": "tests/performance/"
      },
      "process": {
        "tdd": true,
        "writeTestsFirst": true,
        "validateBeforeCommit": true
      },
      "runBeforePush": true
    },
    "codeQuality": {
      "typescript": {
        "strict": true,
        "status": "implemented"
      },
      "linting": "eslint",
      "formatting": "prettier"
    }
  },
  "dependencies": {
    "node": "18.x",
    "packageManager": "pnpm",
    "nextjs": "14.x",
    "commonCliTools": {
      "git": {
        "description": "Version control system",
        "warning": "NEVER commit via command line! Always use the GitHub UI or a Git client. Never commit sensitive information or environment files (.env*)!"
      },
      "vercel": {
        "description": "Deployment platform CLI",
        "projectCommands": [
          "vercel env pull - Pull environment variables to local .env files",
          "vercel deploy - Deploy the project to a preview environment"
        ]
      },
      "pnpm": {
        "description": "Fast, disk space efficient package manager"
      },
      "drizzle": {
        "description": "Database ORM and migration tool",
        "projectCommands": [
          "pnpm drizzle-kit generate - Generate migrations from schema changes",
          "pnpm drizzle-kit push - Apply migrations to database"
        ]
      }
    }
  },
  "security": {
    "envFiles": {
      "allowCommit": false,
      "examples": [
        ".env.example",
        ".env.local.example",
        ".env.preview.example",
        ".env.production.example"
      ]
    },
    "apiKeys": {
      "storage": "environment-variables"
    },
    "auth": {
      "required": true,
      "provider": "github-oauth",
      "databaseSecurity": "row-level",
      "middleware": "path-based"
    }
  },
  "cicd": {
    "checks": {
      "tests": true,
      "coverage": true,
      "lint": true,
      "types": true,
      "build": true
    },
    "deployment": {
      "platform": "vercel",
      "environments": [
        "development",
        "preview",
        "production"
      ],
      "domains": {
        "production": "wackywavelength.fyi",
        "preview": "dereks-projects-32c37a6a.vercel.app"
      },
      "autoDeploy": {
        "branch": "main",
        "enabled": true
      },
      "requiredChecksBeforeDeployment": [
        {
          "name": "linting",
          "description": "Ensure code meets style and quality standards",
          "command": "npm run lint",
          "required": true
        },
        {
          "name": "testing",
          "description": "Verify all tests pass",
          "command": "npm run test",
          "required": true
        },
        {
          "name": "buildCheck",
          "description": "Ensure application builds successfully",
          "command": "npm run build",
          "required": true
        },
        {
          "name": "typeCheck",
          "description": "Verify TypeScript types are correct",
          "command": "npm run typecheck",
          "required": true
        }
      ],
      "deploymentWorkflow": {
        "development": {
          "description": "Local development deployment",
          "steps": [
            "Run tests: npm run test",
            "Build locally: npm run build",
            "Test build locally: npm run start"
          ]
        },
        "preview": {
          "description": "Preview deployment for testing",
          "steps": [
            "Commit changes to feature branch",
            "Push to GitHub to trigger preview build",
            "Verify Vercel build succeeds",
            "Verify functionality in preview environment"
          ]
        },
        "production": {
          "description": "Production deployment",
          "steps": [
            "Commit changes to feature branch",
            "Push to GitHub and create pull request",
            "Verify all CI checks pass on the PR",
            "Merge PR to main branch",
            "Vercel automatically deploys main branch to production",
            "Verify functionality in production environment"
          ],
          "approvalRequired": true,
          "rollbackPlan": "Use Vercel dashboard to rollback to previous deployment if issues are detected"
        }
      }
    }
  },
  "bestPractices": {
    "preCommitWorkflow": {
      "description": "MANDATORY steps that MUST be followed before committing any changes",
      "criticalWarning": "NEVER BYPASS THESE STEPS! Committing code that doesn't pass all checks can break the build for everyone.",
      "enforcementMechanism": "Use 'npm run setup-hooks' to install Git hooks that enforce this workflow",
      "steps": [
        {
          "name": "environmentCheck",
          "command": "npm run check-env",
          "description": "Verify environment variables are consistent across environments",
          "required": true
        },
        {
          "name": "linting",
          "command": "npm run lint",
          "description": "Run linting to catch syntax and style issues",
          "required": true
        },
        {
          "name": "typeCheck",
          "command": "npm run typecheck",
          "description": "Verify TypeScript types are correct",
          "required": true
        },
        {
          "name": "testing",
          "command": "npm run test",
          "description": "Run all tests to ensure functionality works as expected",
          "required": true
        },
        {
          "name": "buildCheck",
          "command": "npm run build",
          "description": "Verify the application builds successfully",
          "required": true,
          "criticalWarning": "NEVER commit code that doesn't build successfully"
        }
      ],
      "automatedEnforcement": {
        "preCommitHook": "npm run pre-commit",
        "ciChecks": ["lint", "test", "build", "typecheck"]
      },
      "troubleshooting": {
        "testFailures": "Fix the issues before committing. Do not modify tests to make them pass unless the test itself is incorrect.",
        "buildFailures": "Fix the code issues before committing. Common problems include syntax errors, missing dependencies, or configuration issues."
      }
    },
    "testDrivenDevelopment": {
      "workflow": {
        "step1_planning": {
          "description": "Clearly define the desired feature or change",
          "actions": [
            "Document the expected behavior",
            "Identify edge cases and failure modes",
            "Determine acceptance criteria"
          ]
        },
        "step2_testing": {
          "description": "Write failing tests that validate the desired functionality",
          "actions": [
            "Create new test file if needed",
            "Write tests that cover all expected behaviors",
            "Include edge cases and error handling",
            "Run tests to confirm they fail as expected"
          ],
          "validation": "Tests should fail at this stage, confirming they actually test something"
        },
        "step3_implementation": {
          "description": "Implement the minimal code needed to pass tests",
          "actions": [
            "Focus on making tests pass, not perfect code",
            "Implement core functionality first",
            "Run tests frequently to track progress"
          ],
          "validation": "All new tests should now pass"
        },
        "step4_verification": {
          "description": "Verify all tests pass and no regressions were introduced",
          "actions": [
            "Run the full test suite",
            "Verify no existing tests are failing",
            "If any existing tests fail, STOP and analyze"
          ],
          "criticalWarning": "If ANY existing tests start failing, this is a RED ALERT. Take a hard look at recent changes and strongly consider reverting them completely."
        },
        "step5_refactoring": {
          "description": "Clean up and optimize the implementation while maintaining test coverage",
          "actions": [
            "Refactor for readability and maintainability",
            "Optimize performance if needed",
            "Run tests after each significant change"
          ],
          "validation": "All tests should continue to pass"
        },
        "step6_deployment": {
          "description": "Validate locally and in a real environment before committing",
          "actions": [
            "FOLLOW THE COMPLETE PRE-COMMIT WORKFLOW - Run 'npm run pre-commit'",
            "Fix ANY build errors before proceeding - NEVER commit code that doesn't build",
            "ONLY AFTER all checks pass: Commit changes to feature branch",
            "Push to GitHub to trigger preview deployment",
            "Verify functionality in the preview deployment"
          ],
          "rule": "Never commit code until all validation checks pass",
          "criticalWarning": "Bypassing these steps can lead to broken builds and failed deployments"
        }
      },
      "warnings": [
        "Never skip writing tests first - this is the foundation of TDD",
        "If ANY tests start failing unexpectedly, stop and investigate immediately",
        "Failing tests are a signal that something is wrong, not that the tests need to be changed",
        "Always run the full test suite before committing changes",
        "Tests should be treated as first-class citizens in the codebase"
      ],
      "benefits": [
        "Ensures code meets requirements before implementation begins",
        "Prevents regressions when making changes",
        "Provides documentation of expected behavior",
        "Enables confident refactoring and optimization"
      ]
    },
    "middleware": {
      "principles": [
        "Keep middleware logic simple and focused",
        "Avoid special cases when possible",
        "Use environment-agnostic code",
        "Ensure testability with clear behavior-focused tests",
        "Optimize for performance by minimizing branching logic"
      ]
    },
    "multiTenant": {
      "dataIsolation": "row-level-security",
      "routing": "hostname-based",
      "customization": "per-tenant-configuration"
    },
    "analytics": {
      "googleAnalytics": {
        "description": "Guidelines for maintaining and extending Google Analytics implementation",
        "updateTriggers": [
          "Adding new pages or routes",
          "Implementing new user interactions (e.g., buttons, forms)",
          "Adding new features that represent business value",
          "Changing user flows or navigation patterns",
          "Implementing new conversion funnels",
          "Adding new tenant-specific features"
        ],
        "requiredActions": [
          "Update tests first (TDD approach) to verify new analytics requirements",
          "Add appropriate event tracking for new user interactions",
          "Document new events in the analytics documentation",
          "Verify events are firing correctly in development environment",
          "Add appropriate data attributes for tracking in the markup",
          "Ensure privacy compliance with new tracking"
        ],
        "eventNamingConventions": {
          "pattern": "[object]_[action]",
          "examples": [
            "button_click",
            "form_submit",
            "page_view",
            "feature_enable",
            "tenant_create"
          ]
        },
        "dataAttributes": {
          "description": "Use data attributes to track elements without modifying JS",
          "pattern": "data-ga-[type]=\"[value]\"",
          "examples": [
            "data-ga-category=\"navigation\"",
            "data-ga-action=\"click\"",
            "data-ga-label=\"signup\""
          ]
        },
        "tenantSpecificTracking": {
          "description": "Guidelines for tracking tenant-specific events",
          "implementation": "Include tenant ID as a custom dimension in all relevant events",
          "privacy": "Ensure tenant data is anonymized and complies with privacy regulations"
        },
        "testing": {
          "description": "Guidelines for testing analytics implementation",
          "approaches": [
            "Unit tests for event handlers",
            "Integration tests for event firing",
            "End-to-end tests for complete user flows",
            "Manual verification in Google Analytics Debug mode"
          ],
          "commands": {
            "basic": "npm run test:ga",
            "build": "npm run test:ga:build",
            "deployment": "npm run test:ga:deployment"
          },
          "when": [
            "After adding new analytics events",
            "Before deploying to production",
            "After updating the Google Analytics configuration",
            "When changing the application layout or structure"
          ]
        }
      }
    }
  },
  "agentPlatform": {
    "description": "Guidelines for building and extending the Agent Platform",
    "architecture": {
      "agentDefinition": {
        "components": [
          "Metadata (name, description, version)",
          "Configuration (parameters, settings)",
          "Tools (API connections, capabilities)",
          "Prompts (instructions, templates)",
          "Execution (runtime settings, memory)"
        ],
        "schema": "See lib/schema.ts for the agent schema definition"
      },
      "containerization": {
        "strategy": "Each agent runs in its own isolated container",
        "scaling": "Containers scale independently based on usage",
        "security": "Containers have limited access to resources and are isolated from each other"
      },
      "apiConnections": {
        "storage": "API keys are encrypted and stored securely",
        "access": "Keys are only decrypted at runtime in the agent container",
        "management": "Users can add, update, and revoke API connections"
      },
      "multiTenancy": {
        "isolation": "Agents are isolated by tenant",
        "sharing": "Agents can be shared with specific permissions",
        "marketplace": "Agents can be published to the marketplace for others to use"
      }
    },
    "bestPractices": {
      "agentDevelopment": {
        "principles": [
          "Focus on a single task or capability",
          "Use clear, concise prompts",
          "Implement proper error handling",
          "Include comprehensive testing",
          "Document usage and limitations"
        ],
        "testing": [
          "Test with various inputs",
          "Verify error handling",
          "Check performance under load",
          "Validate security measures",
          "Test integration with other systems"
        ],
        "security": [
          "Never expose API keys in client-side code",
          "Validate all inputs",
          "Limit agent permissions",
          "Monitor for unusual behavior",
          "Implement rate limiting"
        ]
      },
      "userExperience": {
        "principles": [
          "Make agent capabilities clear",
          "Provide helpful error messages",
          "Design intuitive configuration interfaces",
          "Include examples and templates",
          "Offer progressive disclosure of advanced features"
        ]
      }
    }
  },
  "rules": [
    {
      "name": "Workflow Transition Decision",
      "description": "Determine which workflow to follow based on current state",
      "steps": [
        {
          "name": "Assess Current State",
          "description": "Evaluate the current state of the project",
          "instructions": [
            "Check if there are any open bugs with 'Critical' or 'High' severity in docs/systematic-dev/bug-tracker.md",
            "If critical bugs exist, transition to the Bug Resolution Workflow",
            "Check if documentation is out of date based on recent changes in docs/systematic-dev/change-log.md",
            "If documentation needs updating, transition to the Documentation Update Workflow",
            "Otherwise, continue with the Systematic Development Workflow"
          ]
        }
      ]
    },
    {
      "name": "Systematic Development Workflow",
      "description": "A structured workflow for systematic development with minimal human intervention",
      "steps": [
        {
          "name": "Initialize",
          "description": "Read project documentation and understand the context",
          "instructions": [
            "Read the project description in docs/systematic-dev/project-description.md",
            "Review the development rules in docs/systematic-dev/development-rules.md",
            "Acknowledge understanding of the project and rules"
          ]
        },
        {
          "name": "Select Task",
          "description": "Select the highest priority task from the backlog",
          "instructions": [
            "Open docs/systematic-dev/backlog.md",
            "Identify the highest priority task with status 'To Do'",
            "Report the selected task ID and title"
          ]
        },
        {
          "name": "Start Task",
          "description": "Update documentation to reflect task has started",
          "instructions": [
            "Update the task status in backlog.md to 'In Progress'",
            "Add an entry to change-log.md with the task ID, 'Started' status, description, and current timestamp",
            "Confirm the updates have been made"
          ]
        },
        {
          "name": "Design Solution",
          "description": "Design a solution for the selected task",
          "instructions": [
            "Review the current solution design in docs/systematic-dev/solution-design.md",
            "Design a solution for the selected task that aligns with the existing architecture",
            "Update solution-design.md with the new design",
            "Confirm the design has been documented"
          ]
        },
        {
          "name": "Write Tests First",
          "description": "Following TDD principles, write tests before implementation",
          "instructions": [
            "Create test files for the components/features to be implemented",
            "Write comprehensive tests that cover all expected behaviors",
            "Include tests for edge cases and error handling",
            "Run the tests to confirm they fail (since implementation doesn't exist yet)",
            "Document the test coverage plan in the solution design",
            "CRITICAL: Do not proceed to implementation until tests are written"
          ]
        },
        {
          "name": "Design Validation",
          "description": "Validate the design against requirements and best practices",
          "instructions": [
            "Review the design against the task's acceptance criteria",
            "Check for alignment with architectural principles in development-rules.md",
            "Identify potential edge cases or failure modes",
            "Consider performance, security, and scalability implications",
            "Refine the design if necessary based on this validation"
          ]
        },
        {
          "name": "Implement Solution",
          "description": "Implement the designed solution",
          "instructions": [
            "FOLLOW TEST-DRIVEN DEVELOPMENT: Implement only what's needed to make the tests pass",
            "Run tests frequently during implementation to track progress",
            "Implement the solution according to the design",
            "Follow the coding standards defined in development-rules.md",
            "If new modules are created, update the Module Registry section in solution-design.md",
            "Confirm all tests are now passing",
            "Confirm the implementation is complete"
          ]
        },
        {
          "name": "Verify Implementation",
          "description": "Verify the implementation meets the acceptance criteria",
          "instructions": [
            "Review the implementation against the acceptance criteria in backlog.md",
            "Check for potential bugs or issues",
            "If issues are found, add them to bug-tracker.md",
            "Confirm the verification is complete"
          ]
        },
        {
          "name": "Quality Gate",
          "description": "Ensure the implementation meets quality standards",
          "instructions": [
            "Verify that the implementation follows all coding standards in development-rules.md",
            "Confirm that all acceptance criteria are met with specific evidence",
            "Check that appropriate tests have been created or updated",
            "Document any technical debt or future improvements needed",
            "Only proceed if all quality criteria are met"
          ]
        },
        {
          "name": "Complete Task",
          "description": "Update documentation to reflect task completion",
          "instructions": [
            "Update the task status in backlog.md to 'Done'",
            "Add an entry to change-log.md with the task ID, 'Completed' status, description, and current timestamp",
            "Confirm the updates have been made"
          ]
        },
        {
          "name": "Progress Report",
          "description": "Summarize progress and plan next steps",
          "instructions": [
            "Summarize what was accomplished in this task",
            "Identify any lessons learned or challenges encountered",
            "Recommend any follow-up tasks that should be added to the backlog",
            "Provide a brief plan for the next steps"
          ]
        },
        {
          "name": "Repeat Process",
          "description": "Return to task selection and continue the workflow",
          "instructions": [
            "Run the 'Workflow Transition Decision' to determine the next workflow to follow",
            "If no tasks remain with 'To Do' status, report completion of all tasks",
            "Otherwise, continue with the next task"
          ]
        }
      ]
    },
    {
      "name": "Bug Resolution Workflow",
      "description": "A workflow for resolving bugs identified during development",
      "steps": [
        {
          "name": "Select Bug",
          "description": "Select the highest priority bug from the bug tracker",
          "instructions": [
            "Open docs/systematic-dev/bug-tracker.md",
            "Identify the highest priority bug with status 'Open'",
            "Report the selected bug ID and title"
          ]
        },
        {
          "name": "Start Bug Resolution",
          "description": "Update documentation to reflect bug resolution has started",
          "instructions": [
            "Update the bug status in bug-tracker.md to 'In Progress'",
            "Add an entry to change-log.md with the bug ID, 'Started' status, description, and current timestamp",
            "Confirm the updates have been made"
          ]
        },
        {
          "name": "Analyze Bug",
          "description": "Analyze the bug to understand its cause",
          "instructions": [
            "Review the bug description and related code",
            "Identify the root cause of the bug",
            "Document the analysis in bug-tracker.md",
            "Confirm the analysis is complete"
          ]
        },
        {
          "name": "Design Fix",
          "description": "Design a fix for the bug",
          "instructions": [
            "Design a fix that addresses the root cause",
            "Update solution-design.md if the fix requires design changes",
            "Confirm the fix design is documented"
          ]
        },
        {
          "name": "Write Regression Tests",
          "description": "Following TDD principles, write tests that verify the bug fix",
          "instructions": [
            "Create or update test files to reproduce the bug",
            "Write tests that will pass once the bug is fixed",
            "Ensure tests cover the specific bug scenario and related edge cases",
            "Run the tests to confirm they fail (verifying they correctly detect the bug)",
            "CRITICAL: Do not proceed to implementation until regression tests are written"
          ]
        },
        {
          "name": "Implement Fix",
          "description": "Implement the designed fix",
          "instructions": [
            "FOLLOW TEST-DRIVEN DEVELOPMENT: Implement only what's needed to make the tests pass",
            "Run tests frequently during implementation to track progress",
            "Implement the fix according to the design",
            "Follow the coding standards defined in development-rules.md",
            "Confirm all tests are now passing",
            "Confirm the implementation is complete"
          ]
        },
        {
          "name": "Verify Fix",
          "description": "Verify the fix resolves the bug",
          "instructions": [
            "Test the fix to ensure it resolves the bug",
            "Check for any regressions or new issues",
            "If new issues are found, add them to bug-tracker.md",
            "Confirm the verification is complete"
          ]
        },
        {
          "name": "Quality Gate",
          "description": "Ensure the fix meets quality standards",
          "instructions": [
            "Verify that the fix follows all coding standards in development-rules.md",
            "Confirm that the bug is fully resolved with specific evidence",
            "Check that appropriate tests have been created or updated to prevent regression",
            "Document any technical debt or future improvements needed",
            "Only proceed if all quality criteria are met"
          ]
        },
        {
          "name": "Complete Bug Resolution",
          "description": "Update documentation to reflect bug resolution completion",
          "instructions": [
            "Update the bug status in bug-tracker.md to 'Fixed'",
            "Add an entry to change-log.md with the bug ID, 'Fixed' status, description, and current timestamp",
            "Confirm the updates have been made"
          ]
        },
        {
          "name": "Progress Report",
          "description": "Summarize bug resolution and lessons learned",
          "instructions": [
            "Summarize the bug, its root cause, and how it was fixed",
            "Identify any lessons learned or process improvements to prevent similar bugs",
            "Recommend any follow-up tasks that should be added to the backlog",
            "Provide a brief plan for the next steps"
          ]
        },
        {
          "name": "Return to Development",
          "description": "Return to the main development workflow",
          "instructions": [
            "Run the 'Workflow Transition Decision' to determine the next workflow to follow",
            "Continue with the appropriate workflow based on the decision"
          ]
        }
      ]
    },
    {
      "name": "Documentation Update Workflow",
      "description": "A workflow for updating documentation",
      "steps": [
        {
          "name": "Identify Documentation Needs",
          "description": "Identify documentation that needs to be updated",
          "instructions": [
            "Review recent changes in the change-log.md",
            "Identify documentation that needs to be updated based on these changes",
            "Report the documentation that needs updating"
          ]
        },
        {
          "name": "Update Documentation",
          "description": "Update the identified documentation",
          "instructions": [
            "Update the identified documentation with the latest information",
            "Ensure consistency across all documentation",
            "Confirm the documentation updates are complete"
          ]
        },
        {
          "name": "Verify Documentation",
          "description": "Verify the documentation is accurate and complete",
          "instructions": [
            "Review the updated documentation for accuracy and completeness",
            "Check for any inconsistencies or gaps",
            "Confirm the verification is complete"
          ]
        },
        {
          "name": "Quality Gate",
          "description": "Ensure the documentation meets quality standards",
          "instructions": [
            "Verify that the documentation follows the project's documentation standards",
            "Check for clarity, completeness, and correctness",
            "Ensure all links and references are valid",
            "Only proceed if all quality criteria are met"
          ]
        },
        {
          "name": "Record Documentation Update",
          "description": "Record the documentation update in the change log",
          "instructions": [
            "Add an entry to change-log.md with 'Documentation Update' as the ID, 'Completed' status, description, and current timestamp",
            "Confirm the update has been recorded"
          ]
        },
        {
          "name": "Progress Report",
          "description": "Summarize documentation updates and next steps",
          "instructions": [
            "Summarize the documentation updates that were made",
            "Identify any areas that may need future documentation improvements",
            "Recommend any follow-up tasks that should be added to the backlog",
            "Provide a brief plan for the next steps"
          ]
        },
        {
          "name": "Return to Development",
          "description": "Return to the main development workflow",
          "instructions": [
            "Run the 'Workflow Transition Decision' to determine the next workflow to follow",
            "Continue with the appropriate workflow based on the decision"
          ]
        }
      ]
    },
    {
      "name": "Error Recovery Workflow",
      "description": "A workflow for recovering from errors or blockers",
      "steps": [
        {
          "name": "Identify Error",
          "description": "Clearly identify the error or blocker",
          "instructions": [
            "Document the specific error or blocker encountered",
            "Capture any error messages or symptoms",
            "Identify the context in which the error occurred",
            "Determine the severity and impact of the error"
          ]
        },
        {
          "name": "Analyze Error",
          "description": "Analyze the error to understand its cause",
          "instructions": [
            "Investigate the potential causes of the error",
            "Review related code or documentation",
            "Identify any dependencies or external factors that may be involved",
            "Document the analysis findings"
          ]
        },
        {
          "name": "Determine Recovery Path",
          "description": "Determine the best path for recovery",
          "instructions": [
            "Consider possible solutions or workarounds",
            "Evaluate the pros and cons of each approach",
            "Select the most appropriate recovery path",
            "Document the selected recovery approach"
          ]
        },
        {
          "name": "Implement Recovery",
          "description": "Implement the recovery solution",
          "instructions": [
            "Execute the selected recovery approach",
            "Document any changes made during recovery",
            "Verify that the error has been resolved",
            "Update relevant documentation if needed"
          ]
        },
        {
          "name": "Document Lessons Learned",
          "description": "Document lessons learned from the error",
          "instructions": [
            "Summarize the error, its cause, and the recovery process",
            "Identify any process improvements to prevent similar errors",
            "Update documentation or add notes to help others avoid the same issue",
            "Consider adding a new task to the backlog if systemic improvements are needed"
          ]
        },
        {
          "name": "Return to Previous Workflow",
          "description": "Return to the workflow that was interrupted",
          "instructions": [
            "Determine which workflow was active when the error occurred",
            "Return to the appropriate step in that workflow",
            "Continue with the development process"
          ]
        }
      ]
    },
    {
      "name": "Server/Client Component Boundary Testing",
      "description": "Guidelines for testing the boundaries between server and client components in Next.js applications",
      "steps": [
        {
          "name": "Identify Component Types",
          "description": "Clearly identify which components are server components and which are client components",
          "instructions": [
            "Mark all client components with 'use client' directive at the top of the file",
            "Document component types in comments or component documentation",
            "Create a list of all client components that are used within server components"
          ]
        },
        {
          "name": "Test Component Boundaries",
          "description": "Create specific tests for the boundaries between server and client components",
          "instructions": [
            "Create integration tests that test the actual rendering of client components within server components",
            "Test event handler props passed to client components from server components",
            "Verify that all event handlers are properly defined in client components",
            "Test that server components don't directly pass functions to client components",
            "Use Next.js testing utilities to test the actual rendering in a Next.js environment"
          ]
        },
        {
          "name": "Runtime Error Testing",
          "description": "Implement tests that can catch runtime errors related to server/client component boundaries",
          "instructions": [
            "Create a test environment that simulates the Next.js runtime",
            "Test the serialization of props passed from server to client components",
            "Verify that no functions or non-serializable data is passed directly from server to client components",
            "Implement error boundary testing to catch potential runtime errors"
          ]
        },
        {
          "name": "Pre-Deployment Verification",
          "description": "Verify server/client component boundaries before deployment",
          "instructions": [
            "Run a full build process before deployment to catch build-time errors",
            "Implement a local preview of the production build to catch runtime errors",
            "Create a checklist for reviewing server/client component interactions",
            "Verify that all client components receiving event handlers are properly marked with 'use client'"
          ]
        }
      ]
    }
  ],
  "instructions": {
    "default": "Follow the 'Systematic Development Workflow' to implement tasks from the backlog. ALWAYS WRITE TESTS FIRST following Test-Driven Development principles before implementing any code. Before starting each new task, run the 'Workflow Transition Decision' to determine if you should address bugs or update documentation first. If you encounter any errors or get stuck, use the 'Error Recovery Workflow' to identify and resolve the issue. Always ensure quality gates are passed before completing any task.",
    "onStart": "Begin by running the 'Workflow Transition Decision' to determine which workflow to follow first. Remember that Test-Driven Development is MANDATORY for all code changes."
  }
} 